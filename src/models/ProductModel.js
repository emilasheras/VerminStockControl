import ProductManager from "./Components/ProductManager.js";

export default class ProductModel {
    /**
     * @param {JSON} params attributes of the product in JSON format 
     */
    constructor(params) {
        this.id = params.id; // Autogenerated Number or String (IDs should never repeat). (passed by the manager)
        this.title = params.title;
        this.description = params.description;
        this.code = params.code;
        this.price = params.price;
        this.status = params.status;
        this.stock = params.stock;
        this.category = params.category;
        this.thumbnails = params.thumbnails??[]; // DEFAULT: if no thumbnails are provided, set it to an empty array
        this.errors = []; // Array of error messages
        this.hasErrors = false; // Boolean to check if the model has errors
        this.validateAttributes();
    }

    validateAttributes(){
        this._rules = this.rules();

        // iterate over the attributes in the rules array
        for(const rule of this._rules) {
            // console.log(`rule`, rule); //!debugging
            try{
                // Check if the product attribute is empty
                if(rule.isRequired && this.isEmpty(this[rule.attribute])) {
                    throw new Error(`Attribute ${rule.attribute} is required`);
                }
                if(!this.isOfType(this[rule.attribute], rule.type)){
                    throw new Error(`Attribute ${rule.attribute} must be of type ${rule.type}`);
                }

                // ... other validations
            }
            catch(e){
                this.errors = this.errors || [];
                this.errors.push(e.message);
                this.hasErrors = this.modelHasErrors();
    
                console.error(`‚ùå ${e.message}`);
            }
        }
        if (this.hasErrors) {
            // return false;
        }else{
            console.log(`‚úÖ Product is valid üóø`);
        }
    }
    isOfType(value, type){
        if(type === 'array'){
            // console.log(`isArray: ${value}? ` + (Array.isArray(value)?'‚úÖ':'‚ùé')); //!debugging
            return Array.isArray(value); // <-- this is a way to check if a value is an array (typeof returns 'object' for arrays)
        }

        const isOfType = (typeof value === type);
        // console.log(`${typeof value} === ${type}? `); //!debugging
        // console.log(`isOfType: ${value}? ` + (isOfType?'‚úÖ':'‚ùé')) //!debugging
        return isOfType;
    }

    isEmpty(value) {
        const isEmpty = value === '' || value === null || value === undefined;
        // console.log(`isEmpty: ${value}? ` + (isEmpty?'‚úÖ':'‚ùé')); //!debugging
        return isEmpty;
    }
    
    modelHasErrors(){
        return this.errors.length > 0;
    }

    // POSSIBLE ATTRIBUTES:
    // - id: Autogenerated Number or String (IDs should never repeat).
    // - title: String.
    // - description: String.
    // - code: String.
    // - price: Number.
    // - status: Boolean (true by default).
    // - stock: Number.
    // - category: String.
    // - thumbnails: Array of Strings containing paths to images related to the product.
    // - Note: All fields are mandatory except for thumbnails.
    rules(){
        return [
            {attribute: 'id', type: 'number', isUnique: true},
            {attribute: 'title', type: 'string', isRequired: true},
            {attribute: 'description', type: 'string', isRequired: true},
            {attribute: 'code', type: 'string', isRequired: true, isUnique: true},
            {attribute: 'price', type: 'number', isRequired: true},
            {attribute: 'status', type: 'boolean', isRequired: true},
            {attribute: 'stock', type: 'number', isRequired: true},
            {attribute: 'category', type: 'string', isRequired: true},
            {attribute: 'thumbnails', type: 'array'}
        ]
    }

    // get Json formatted product
    toJson(){
        return {
            id: this.id,
            title: this.title,
            description: this.description,
            code: this.code,
            price: this.price,
            status: this.status,
            stock: this.stock,
            category: this.category,
            thumbnails: this.thumbnails
        }
    }

}